<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:extension="editor.extension.*"
					   xmlns:ui="editor.ui.*"
					   width="1200" height="800" showStatusBar="false"
					   uncaughtError="onApplicationRuntimeError(event)" applicationComplete="editorInit(event)" >
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace extension "editor.extension.*";
		
		@font-face
		{  
			src:url("font/LangMan.ttf");
			fontFamily:defaultFont;  
			fontStyle:normal;
			fontWeight:normal;
		}  
		
		global
		{
			fontSize:12;  
			fontFamily:defaultFont;
		}
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import editor.cfg.ConfigManager;
			import editor.debug.Logger;
			import editor.extension.ExEvent;
			import editor.extension.vo.TreeNode;
			import editor.setting.EditorSetting;
			import editor.ui.DirectorySettingWindow;
			import editor.ui.LoggerPanel;
			import editor.ui.PopUpWindowProxy;
			import editor.ui.TexturePackWindow;
			import editor.utility.AvatarConfigManager;
			import editor.utility.KeyboardManager;
			import editor.vo.AvatarTreeNode;
			import editor.vo.EffectTreeNode;
			
			import lib.animation.avatar.cfg.ConfigAvatar;
			import lib.animation.avatar.cfg.atom.ConfigSkill;
			import lib.animation.avatar.cfg.atom.ConfigUnit;
			import lib.animation.effect.cfg.ConfigEffect;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.Application;
			public static const MENU_SETTING:String = "Setting";
			public static const CHILD_SETTING_PATH:String = "SettingPath";
			
			public static const CHILD_RES_TEXTUREPACK:String = "TexturePack";
			
			[Bindable]
			private var menuData:Array = [
				{
					label: "设置",
					children: [
						{
							id: CHILD_SETTING_PATH,
							label: "路径设置"
						}
					]
				},
				{
					label: "资源",
					children: [
						{
							id: CHILD_RES_TEXTUREPACK,
							label: "资源打包"
						}
					]
				}
			];
			
			/** 
			 * 菜单选择
			 **/
			protected function onMenuSelected(event:ExEvent):void
			{
				switch(event.params)
				{
					case CHILD_SETTING_PATH:
						//路径设置
						//PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject,DirectorySettingWindow,true);
						popup(DirectorySettingWindow);
						break;
					case CHILD_RES_TEXTUREPACK:
						debug("资源打包");
						popup(TexturePackWindow);
						break;
				}
			}
			
			protected function onApplicationRuntimeError(event:UncaughtErrorEvent):void
			{
				Alert.show("运行时异常，异常信息[" + event.text + "]");
			}
			
			/**
			 * 树菜单构建中
			 **/
			protected function onTreeBuildProgress(event:ExEvent):void
			{
				// TODO Auto-generated method stub
				
				
			}
			
			/**
			 * 角色动画文件夹选择
			 **/
			protected function onAvatarDirectorySelect(event:ExEvent):void
			{
//				var node:TreeNode = event.params as TreeNode;
//				if(node)
//				{
//					avatarWorkspace.appendToWorkspace(node);
//				}
			}
			
			protected function editorInit(event:FlexEvent):void
			{
				EditorSetting.instance;
				onSettingUpdate();
				KeyboardManager.instance;
			}
			
			/**
			 * 编辑器配置发生变更
			 **/
			private function onSettingUpdate():void
			{
				//刷新avatar配置
				AvatarConfigManager.instance.refresh();
				ConfigManager.instance.refresh();
				initAvatarTree();
				initEffectTree();
				initiSkillTree();
			}
			
			[Bindable]
			private var avatarConfigs:ArrayCollection = null;
			private function initAvatarTree():void
			{
				//avatarFileTree.filePath = "D:\\果游工作代码\\美术资源\\角色特效\\特效";
				//unitConfigs = new ArrayCollection();
//				for each(var unit:ConfigUnit in ConfigManager.instance.units)
				avatarConfigs = new ArrayCollection();
				var node:AvatarTreeNode = null;
				for each(var cfg:ConfigAvatar in ConfigManager.instance.avatars)
				{
					node = new AvatarTreeNode();
					node.avatar = cfg;
					node.atom = ConfigManager.instance.findUnitAtomById(cfg.id);
					avatarConfigs.addItem(node);
					//unitConfigs.addItem(unit);
				}
			}
			
			[Bindable]
			private var effectConfigs:ArrayCollection = null;
			private function initEffectTree():void
			{
				effectConfigs = new ArrayCollection();
				var node:EffectTreeNode = null;
				for each(var cfg:ConfigEffect in ConfigManager.instance.effects)
				{
					node = new EffectTreeNode(cfg);
					node.config = cfg;
					effectConfigs.addItem(node);
				}
			}
			

			[Bindable]
			private var skillConfigs:ArrayCollection = null;
			private function initiSkillTree():void
			{
				skillConfigs = new ArrayCollection();
				for each(var skill:ConfigSkill in ConfigManager.instance.skills)
				{
					skillConfigs.addItem(skill);
				}
			}
			
			protected function onAvatarTreeItemClick(event:ListEvent):void
			{
				var avatar:AvatarTreeNode = avatarConfigs.getItemAt(event.rowIndex) as AvatarTreeNode;
				animWorkspace.appendToWorkspace(avatar);
			}
			
			protected function onSkillTreeItemClick(event:ListEvent):void
			{
				
			}
			
			protected function onEffectTreeItemClick(event:ListEvent):void
			{
				var effect:EffectTreeNode = effectConfigs.getItemAt(event.rowIndex) as EffectTreeNode;
				animWorkspace.appendToWorkspace(effect);
			}
			
		]]>
	</fx:Script>
	
	<extension:ExMenuBar width="100%" height="20" dataProvider="{menuData}" onMenuSelect="onMenuSelected(event)" />
	<mx:Accordion x="10" y="28" width="200" height="763">
		<s:NavigatorContent width="100%" height="100%" label="角色配置">
			<extension:ExTree width="100%" height="100%" id="avatarCfgTree" labelField="name" dataProvider="{avatarConfigs}" itemClick="onAvatarTreeItemClick(event)" />
		</s:NavigatorContent>
		<!--
		<s:NavigatorContent width="100%" height="100%" label="角色动画">
			<extension:ExTree width="100%" height="100%" id="avatarFileTree" labelField="fileName" onProgress="onTreeBuildProgress(event)" onTreeDirectorySelect="onAvatarDirectorySelect(event)" />
		</s:NavigatorContent>
		-->
		<s:NavigatorContent width="100%" height="100%" label="特效">
			<extension:ExTree width="100%" height="100%" id="effectFileTree" labelField="name" dataProvider="{effectConfigs}" itemClick="onEffectTreeItemClick(event)" />
		</s:NavigatorContent>
		
		<s:NavigatorContent width="100%" height="100%" label="技能配置">
			<extension:ExTree width="100%" height="100%" id="skillCfgTree" labelField="name" dataProvider="{skillConfigs}" itemClick="onSkillTreeItemClick(event)" />
		</s:NavigatorContent>
		
	</mx:Accordion>
	<ui:AnimationWorkspace x="218" y="28" width="973" height="762" id="animWorkspace">
	</ui:AnimationWorkspace>
	
</s:WindowedApplication>
