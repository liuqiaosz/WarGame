<?xml version="1.0" encoding="utf-8"?>
<ui:PopUpWindowProxy xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:ui="editor.ui.*" width="550" height="300" xmlns:extension="editor.extension.*">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import editor.anim.avatar.Avatar;
			import editor.anim.core.Animation;
			import editor.anim.eff.Effect;
			import editor.asset.ResourceManager;
			import editor.extension.ExEvent;
			import editor.setting.EditorSetting;
			import editor.utility.FileSystemTool;
			
			import flash.utils.getTimer;
			
			import lib.animation.AnimEnum;
			import lib.animation.avatar.cfg.ConfigActionTrigger;
			import lib.animation.effect.cfg.ConfigEffect;
			
			import mx.core.FlexGlobals;
			
			private var frames:Vector.<Bitmap> = null;
			private var lastUpdate:int = 0;
			
			
			private var currentIndex:int = 0;
			
			private var waitPlay:Boolean = false;
			
			[Bindable]
			private var _totalFrame:int = 0;
			[Bindable]
			private var _start:int = 0;
			[Bindable]
			private var _end:int = 0;
			[Bindable]
			private var _duration:int = 0;
			
			private var effFrames:Vector.<Bitmap> = null;
			private var _eff:ConfigEffect = null;
			private var hasTrigger:Boolean = false;
			private var _trigger:ConfigActionTrigger = null;
			
			private var avatar:Animation = null;
			private var effect:Animation = null;

			/**
			 * 预览动作
			 **/
//			public function playPreview(id:String,start:int,end:int,duration:int,trigger:ConfigActionTrigger = null):void
			public function playPreview(id:String,start:int,end:int,duration:int,trigger:ConfigActionTrigger = null):void
			{
				var total:Vector.<Bitmap> = ResourceManager.instance.getAssetById(id);
				frames = new Vector.<Bitmap>();
				for(var idx:int = 0; idx<(end - start); idx++)
				{
					frames.push(total[start + idx]);
				}
				_duration = duration;
				_totalFrame = end - start;
				_start = start;
				_end = end;
				
				if(!frames)
				{
					showAlert("帧动画未找到或未加载");
					return;
				}
				
				if(trigger && trigger.triggerType == AnimEnum.Trigger_Effect && trigger.effectPosition == 1)
				{
					_trigger = trigger;
					hasTrigger = true;
					//特效触发器
					if(ResourceManager.instance.hasAsset(trigger.value))
					{
						//有资源
						effFrames = ResourceManager.instance.getAssetById(trigger.value);
					}
					else
					{
						var directory:String = EditorSetting.instance.setting.directory.effectDirectory + "/" + trigger.value;
						//preload
						if(FileSystemTool.fileExists(directory))
						{
							ResourceManager.instance.loadAssetDirectory(trigger.value,
								directory,function(imgs:Vector.<Bitmap>):void{
									effFrames = imgs;
									playAnim();
								});
						}
					}
				}
				else
				{
					playAnim();
				}
			}
			
			private function playAnim():void
			{
				if(container)
				{
					avatar = new Animation(frames);
					avatar.play(_duration,1,onProgress);
					container.addElement(avatar);
					
					avatar.x = (container.width - avatar.width) >> 1;
					avatar.y = ((container.height) >> 1) + avatar.height;
					//FlexGlobals.topLevelApplication.addEventListener(Event.ENTER_FRAME,onUpdate);
					//lastUpdate = flash.utils.getTimer();
				}
				else
				{
					waitPlay = true;
				}
			}
			
			
			override protected function onShow():void
			{
				if(waitPlay)
				{
					//FlexGlobals.topLevelApplication.addEventListener(Event.ENTER_FRAME,onUpdate);
					lastUpdate = flash.utils.getTimer();
					waitPlay = false;
				}
				super.onShow();
			}
			
			override protected function onClose():void
			{
				//FlexGlobals.topLevelApplication.removeEventListener(Event.ENTER_FRAME,onUpdate);
				if(avatar)
				{
					avatar.stop();
					avatar.dispose();
					avatar = null;
				}
				if(effect)
				{
					effect.stop();
					effect.dispose();
					effect = null;
				}
				effFrames = frames = null;
				_trigger = null;
				super.onClose();
			}
			
			private function onProgress(current:int,total:int):void
			{
				avatar.x = (container.width - avatar.width) >> 1;
				avatar.y = ((container.height) >> 1) + avatar.height;
				if(hasTrigger)
				{
					//触发器
					if(_trigger.triggerFrame == currentIndex)
					{
						effect = new Animation(effFrames);
						container.addElement(effect);
						effectResposition();
					}
				}
			}
			
			private function effectResposition():void
			{
				if(_trigger.offset)
				{
					
					effect.x = avatar.x + (int(_trigger.offset.substr(0,_trigger.offset.indexOf(","))));
					effect.y = avatar.y + (int(_trigger.offset.substr(_trigger.offset.indexOf(",") + 1)));
				}
			}
			
			protected function playAgain(event:MouseEvent):void
			{
				if(avatar && !avatar.running)
				{
					avatar.play(_duration,1,onProgress);
				}
			}
			
			protected function onRepeatChange(event:ExEvent):void
			{
				if(repeat.selected)
				{
					//重复播放
					if(avatar)
					{
						avatar.stop();
						avatar.play(_duration,0,onProgress);
					}
				}
				else
				{
					//取消重复播放
					if(avatar)
					{
						avatar.stop();
						avatar.play(_duration,1,onProgress);
					}
				}
			}
			
		]]>
	</fx:Script>
	<s:HGroup width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		<s:VGroup>
			<extension:ExFormLabelItem labelText="总帧数" id="totalFrame"  labelValue="{String(_totalFrame)}" />
			<extension:ExFormLabelItem labelText="播放速率" id="playDurtaion" labelValue="{String(_duration)}" />
			<extension:ExFormLabelItem labelText="开始帧" id="start" labelValue="{String(_start)}"/>
			<extension:ExFormLabelItem labelText="结束帧" id="end" labelValue="{String(_end)}" />
			<extension:ExFormCheckBox labelText="重复播放" id="repeat" onChange="onRepeatChange(event)" />
			<s:Button label="重播" click="playAgain(event)" />
		</s:VGroup>
		
		<s:Group width="100%" height="100%" id="container">
			
		</s:Group>

	</s:HGroup>
</ui:PopUpWindowProxy>
