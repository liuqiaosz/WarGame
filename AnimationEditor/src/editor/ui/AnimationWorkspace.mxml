<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
			xmlns:s="library://ns.adobe.com/flex/spark" 
			xmlns:extension="editor.extension.*"
			xmlns:mx="library://ns.adobe.com/flex/mx" width="973" height="762" borderColor="0x000000" borderVisible="false" creationComplete="onCreated(event)" xmlns:ui="editor.ui.*">
	<fx:Declarations>

	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import editor.asset.ResourceManager;
			import editor.cfg.ConfigManager;
			import editor.extension.ExEvent;
			import editor.extension.ExTabAvatarContent;
			import editor.extension.ExTabContent;
			import editor.extension.ExTabEffectContent;
			import editor.extension.vo.TreeNode;
			import editor.setting.EditorSetting;
			import editor.utility.FileSystemTool;
			import editor.utility.KeyboardManager;
			import editor.vo.AvatarTreeNode;
			import editor.vo.EffectTreeNode;
			
			import flexlib.events.SuperTabEvent;
			
			import lib.animation.avatar.cfg.ConfigAvatarAction;
			import lib.animation.effect.Effect;
			import lib.animation.effect.cfg.ConfigEffect;
			
			import mx.events.FlexEvent;
			
//			[Bindable]
//			private var tabItemClass:Class = ExTabAvatarContent;
			
			//private var currentAvatar:AvatarTreeNode = null;
			private var currentConfig:Object = null;
			//当前选择的TAB
			private var currentTab:ExTabContent = null;
//			public function appendToWorkspace(value:TreeNode):void
//			public function appendToWorkspace(value:AvatarTreeNode):void
			
			[Bindable]
			private var isAvatar:Boolean = false;
			
			[Bindable]
			private var isEffect:Boolean = false;
			public function appendToWorkspace(config:Object):void
			{
				currentConfig = config;
				var directory:String = "";
				if(config is AvatarTreeNode)
				{
					isAvatar = true;
					var currentAvatar:AvatarTreeNode = currentConfig as AvatarTreeNode;
					debug("select avatar:" + currentAvatar.atom.id);
					directory = EditorSetting.instance.setting.directory.avatarDirectory + "/" + currentAvatar.atom.id;
					if(!ResourceManager.instance.hasAsset(currentAvatar.atom.id))
					{
						if(FileSystemTool.fileExists(directory))
						{
							ResourceManager.instance.loadAssetDirectory(currentAvatar.atom.id,
								EditorSetting.instance.setting.directory.avatarDirectory + "/" + currentAvatar.atom.id,
								function(imgs:Vector.<Bitmap>):void{
									onLoaded();
								});
						}
						else
						{
							labelStateId.text = "ID:" + currentAvatar.atom.id;
							statePanel.visible = true;
							labelFrameCount.text = "Empty";
						}
					}
					else
					{
						onLoaded();
					}
				}
//				else if(config is ConfigEffect)
				else if(config is EffectTreeNode)
				{
					//特效
					isAvatar = false;
					var currentEffect:EffectTreeNode = currentConfig as EffectTreeNode;
					debug("select effect:" + currentEffect.config.id);
					directory = EditorSetting.instance.setting.directory.effectDirectory + "/" + currentEffect.config.id;
					if(!ResourceManager.instance.hasAsset(currentEffect.config.id))
					{
						if(FileSystemTool.fileExists(directory))
						{
							ResourceManager.instance.loadAssetDirectory(currentEffect.config.id,
								EditorSetting.instance.setting.directory.effectDirectory + "/" + currentEffect.config.id,
								function(imgs:Vector.<Bitmap>):void{
									onLoaded();
								});
						}
						else
						{
							labelStateId.text = "ID:" + currentEffect.config.id;
							statePanel.visible = true;
							labelFrameCount.text = "Empty";
						}
					}
					else
					{
						onLoaded();
					}
				}
			}
			
			private function onLoaded():void
			{
				if(currentConfig is AvatarTreeNode)
				{
					var avatar:AvatarTreeNode = currentConfig as AvatarTreeNode;
					currentTab = workspace.appendTab(avatar.atom.name,avatar,ExTabAvatarContent) as ExTabAvatarContent;
					actionPanel.actions = avatar.avatar.actions;
					labelStateId.text = "ID:" + avatar.atom.id;
					labelFrameCount.text = "Frames:" + ResourceManager.instance.getAssetById(avatar.atom.id).length;
					statePanel.visible = true;
					isEffect = false;
					isAvatar = true;
					
				}
				else if(currentConfig is EffectTreeNode)
				{
					var effect:EffectTreeNode = currentConfig as EffectTreeNode;
					currentTab = workspace.appendTab(effect.config.name,effect.config,ExTabEffectContent);
					labelStateId.text = "ID:" + effect.config.id;
					labelFrameCount.text = "Frames:" + ResourceManager.instance.getAssetById(effect.config.id).length;
					statePanel.visible = true;
					isEffect = true;
					isAvatar = false;
					effectPanel.config = effect.config;
				}
			}
			
			protected function onCreated(event:FlexEvent):void
			{
				KeyboardManager.instance.onCommand(KeyboardManager.COMMAND_QUICKSAVE,onCommandQuickSave);
			}
			
			private function onCommandQuickSave(value:int):void
			{
				debug("快速保存");
				if(currentTab && currentTab.isNeedSave)
				{
					if(currentTab.content is AvatarTreeNode)
					{
						//执行快速保存动作,将数据写入文件
						if(ConfigManager.instance.saveAvatar())
						{
							showAlert("保存成功");
							currentTab.isNeedSave = false;
						}
						else
						{
							showAlert("保存失败");
						}
					}
					else
					{
						if(ConfigManager.instance.saveEffect())
						{
							showAlert("保存成功");
							currentTab.isNeedSave = false;
						}
						else
						{
							showAlert("保存失败");
						}
					}
				}
			}
			
			/**
			 * 增加新动作
			 **/
			private function onAddAction(event:MouseEvent):void
			{
				var window:CreateActionWindow = CreateActionWindow(popup(CreateActionWindow));
				var avatar:AvatarTreeNode = currentConfig as AvatarTreeNode;
				window.avatar = avatar.avatar;
				window.onActionCreate = function(actName:String,start:int,end:int,duration:int):void{
					var action:ConfigAvatarAction = new ConfigAvatarAction();
					action.start = start;
					action.end = end;
					action.duration = duration;
					action.name = actName;
					avatar.avatar.actions.push(action);
					
					actionPanel.actions = avatar.avatar.actions;
					if(currentTab)
					{
						currentTab.isNeedSave = true;
					}
				};
			}
			
			/**
			 * TAB标签关闭
			 **/
			protected function onTabClose(event:SuperTabEvent):void
			{
				
			}
			
			protected function onActionSelected(event:ExEvent):void
			{
				var action:ConfigAvatarAction = event.params as ConfigAvatarAction;
				var window:ModifyActionWindow = popup(ModifyActionWindow) as ModifyActionWindow;
				window.setData(AvatarTreeNode(currentConfig).avatar,action.name);
				window.onActionModify = function(newName:String,newStart:int,newEnd:int,newDuration:int):void{
					action.duration = newDuration;
					action.name = newName;
					action.start = newStart;
					action.end = newEnd;
					
					actionPanel.actions = AvatarTreeNode(currentConfig).avatar.actions;
					onDataUpdate(null);
				};
			}
			
			protected function onTabCloseCheck(index:int):Boolean
			{
				if(ExTabAvatarContent(workspace.tabs[index]).isNeedSave)
				{
					showAlert("关闭的标签页有数据未保存");
					return false;
				}
				return true;
			}
			
			protected function onTabChanged(event:ExEvent):void
			{
				currentTab = event.params as ExTabContent;
				if(currentTab.content is AvatarTreeNode)
				{
					currentConfig = currentTab.content;
					var avatar:AvatarTreeNode = currentConfig as AvatarTreeNode;
					actionPanel.actions = avatar.avatar.actions;
					labelStateId.text = "ID:" + avatar.atom.id;
					labelFrameCount.text = "Frames:" + ResourceManager.instance.getAssetById(avatar.atom.id).length;
				}
			}
			
			protected function onDataUpdate(event:ExEvent):void
			{
				if(currentTab)
				{
					currentTab.isNeedSave = true;
				}
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:HorizontalLayout />
	</s:layout>
	<s:Group width="750" height="100%">
		<extension:ExTabNavigator width="100%" height="100%" borderStyle="solid" horizontalGap="5" paddingLeft="5" id="workspace" 
			tabClose="onTabClose(event)" onCloseTabCheckFunc="onTabCloseCheck" onTabChanged="onTabChanged(event)"
			paddingTop="5" tabOffset="5">
		</extension:ExTabNavigator>
		
		<s:BorderContainer x="5" y="25" width="150" height="150" cornerRadius="2" borderColor="0x5d5d5d" borderWeight="2" borderVisible="true" id="statePanel" visible="false">
			<s:layout>
				<s:VerticalLayout gap="5" paddingLeft="5" paddingTop="5" />
			</s:layout>
			
			<s:Label width="120" id="labelStateId" />
			<s:Label width="120" id="labelFrameCount" />
		</s:BorderContainer>
	</s:Group>
	
	<s:VGroup width="100%" height="100%">

		<ui:ActionWorkspace visible="{isAvatar}" includeInLayout="{isAvatar}" width="100%" height="250" borderVisible="true" dropShadowVisible="false" title="动作" id="actionPanel" onChange="onActionSelected(event)">
			
			<ui:controlBarContent>
				<s:Image width="18" height="18" smooth="true" smoothingQuality="high"
						 source="@Embed('../assets/icon/Add.png')" buttonMode="true" click="onAddAction(event)"/>
				
				<s:Image width="18" height="18" smooth="true" smoothingQuality="high"
						 source="@Embed('../assets/icon/Delete.png')"/>
				
				<s:Image width="18" height="18" smooth="true" smoothingQuality="high"
						 source="@Embed('../assets/icon/Add.png')" buttonMode="true" />
			</ui:controlBarContent>
			
		</ui:ActionWorkspace>
		
		<ui:EffectInspector id="effectPanel" width="100%" height="300" visible="{isEffect}" includeInLayout="{isEffect}" onDataUpdate="onDataUpdate(event)" />
	</s:VGroup>
	
	
</s:BorderContainer>
